{
  "version": 3,
  "sources": ["../../three/examples/jsm/renderers/webgl-legacy/nodes/SlotNode.js", "../../three/examples/jsm/renderers/webgl-legacy/nodes/WebGLNodeBuilder.js", "../../three/examples/jsm/renderers/webgl-legacy/nodes/WebGLNodes.js"],
  "sourcesContent": ["import { Node } from 'three/nodes';\n\nclass SlotNode extends Node {\n\n\tconstructor( params ) {\n\n\t\tsuper( params.nodeType );\n\n\t\tthis.node = null;\n\t\tthis.source = null;\n\t\tthis.target = null;\n\t\tthis.inclusionType = 'replace';\n\n\t\tObject.assign( this, params );\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\treturn this.node.build( builder, this.getNodeType( builder ) );\n\n\t}\n\n}\n\nexport default SlotNode;\n", "import { defaultShaderStages, NodeFrame, MathNode, GLSLNodeParser, NodeBuilder, normalView } from 'three/nodes';\nimport SlotNode from './SlotNode.js';\nimport { PerspectiveCamera, ShaderChunk, ShaderLib, UniformsUtils, UniformsLib } from 'three';\n\nconst nodeFrame = new NodeFrame();\nnodeFrame.camera = new PerspectiveCamera();\n\nconst nodeShaderLib = {\n\tLineBasicNodeMaterial: ShaderLib.basic,\n\tMeshBasicNodeMaterial: ShaderLib.basic,\n\tPointsNodeMaterial: ShaderLib.points,\n\tMeshStandardNodeMaterial: ShaderLib.standard,\n\tMeshPhysicalNodeMaterial: ShaderLib.physical,\n\tMeshPhongNodeMaterial: ShaderLib.phong\n};\n\nconst glslMethods = {\n\t[ MathNode.ATAN2 ]: 'atan'\n};\n\nconst precisionLib = {\n\tlow: 'lowp',\n\tmedium: 'mediump',\n\thigh: 'highp'\n};\n\nfunction getIncludeSnippet( name ) {\n\n\treturn `#include <${name}>`;\n\n}\n\nfunction getShaderStageProperty( shaderStage ) {\n\n\treturn `${shaderStage}Shader`;\n\n}\n\nclass WebGLNodeBuilder extends NodeBuilder {\n\n\tconstructor( object, renderer, shader, material = null ) {\n\n\t\tsuper( object, renderer, new GLSLNodeParser(), null, material );\n\n\t\tthis.shader = shader;\n\t\tthis.slots = { vertex: [], fragment: [] };\n\n\t\tthis._parseShaderLib();\n\t\tthis._parseInclude( 'fragment', 'lights_physical_fragment', 'clearcoat_normal_fragment_begin', 'transmission_fragment' );\n\t\tthis._parseObject();\n\n\t\tthis._sortSlotsToFlow();\n\n\t}\n\n\tgetMethod( method ) {\n\n\t\treturn glslMethods[ method ] || method;\n\n\t}\n\n\taddSlot( shaderStage, slotNode ) {\n\n\t\tthis.slots[ shaderStage ].push( slotNode );\n\n\t}\n\n\t_parseShaderLib() {\n\n\t\tconst material = this.material;\n\n\t\tlet type = material.type;\n\n\t\t// see https://github.com/mrdoob/three.js/issues/23707\n\n\t\tif ( material.isMeshPhysicalNodeMaterial ) type = 'MeshPhysicalNodeMaterial';\n\t\telse if ( material.isMeshStandardNodeMaterial ) type = 'MeshStandardNodeMaterial';\n\t\telse if ( material.isMeshPhongNodeMaterial ) type = 'MeshPhongNodeMaterial';\n\t\telse if ( material.isMeshBasicNodeMaterial ) type = 'MeshBasicNodeMaterial';\n\t\telse if ( material.isPointsNodeMaterial ) type = 'PointsNodeMaterial';\n\t\telse if ( material.isLineBasicNodeMaterial ) type = 'LineBasicNodeMaterial';\n\n\t\t// shader lib\n\n\t\tif ( nodeShaderLib[ type ] !== undefined ) {\n\n\t\t\tconst shaderLib = nodeShaderLib[ type ];\n\t\t\tconst shader = this.shader;\n\n\t\t\tshader.vertexShader = shaderLib.vertexShader;\n\t\t\tshader.fragmentShader = shaderLib.fragmentShader;\n\t\t\tshader.uniforms = UniformsUtils.merge( [ shaderLib.uniforms, UniformsLib.lights ] );\n\n\t\t}\n\n\t}\n\n\t_parseObject() {\n\n\t\tconst { material, renderer } = this;\n\n\t\tthis.addSlot( 'fragment', new SlotNode( {\n\t\t\tnode: normalView,\n\t\t\tnodeType: 'vec3',\n\t\t\tsource: getIncludeSnippet( 'clipping_planes_fragment' ),\n\t\t\ttarget: 'vec3 TransformedNormalView = %RESULT%;',\n\t\t\tinclusionType: 'append'\n\t\t} ) );\n\n\t\tif ( renderer.toneMappingNode && renderer.toneMappingNode.isNode === true ) {\n\n\t\t\tthis.addSlot( 'fragment', new SlotNode( {\n\t\t\t\tnode: material.colorNode,\n\t\t\t\tnodeType: 'vec4',\n\t\t\t\tsource: getIncludeSnippet( 'tonemapping_fragment' ),\n\t\t\t\ttarget: ''\n\t\t\t} ) );\n\n\t\t}\n\n\t\t// parse inputs\n\n\t\tif ( material.colorNode && material.colorNode.isNode ) {\n\n\t\t\tthis.addSlot( 'fragment', new SlotNode( {\n\t\t\t\tnode: material.colorNode,\n\t\t\t\tnodeType: 'vec4',\n\t\t\t\tsource: 'vec4 diffuseColor = vec4( diffuse, opacity );',\n\t\t\t\ttarget: 'vec4 diffuseColor = %RESULT%; diffuseColor.a *= opacity;',\n\t\t\t} ) );\n\n\t\t}\n\n\t\tif ( material.opacityNode && material.opacityNode.isNode ) {\n\n\t\t\tthis.addSlot( 'fragment', new SlotNode( {\n\t\t\t\tnode: material.opacityNode,\n\t\t\t\tnodeType: 'float',\n\t\t\t\tsource: getIncludeSnippet( 'alphatest_fragment' ),\n\t\t\t\ttarget: 'diffuseColor.a = %RESULT%;',\n\t\t\t\tinclusionType: 'append'\n\t\t\t} ) );\n\n\t\t}\n\n\t\tif ( material.normalNode && material.normalNode.isNode ) {\n\n\t\t\tthis.addSlot( 'fragment', new SlotNode( {\n\t\t\t\tnode: material.normalNode,\n\t\t\t\tnodeType: 'vec3',\n\t\t\t\tsource: getIncludeSnippet( 'normal_fragment_begin' ),\n\t\t\t\ttarget: 'normal = %RESULT%;',\n\t\t\t\tinclusionType: 'append'\n\t\t\t} ) );\n\n\t\t}\n\n\t\tif ( material.emissiveNode && material.emissiveNode.isNode ) {\n\n\t\t\tthis.addSlot( 'fragment', new SlotNode( {\n\t\t\t\tnode: material.emissiveNode,\n\t\t\t\tnodeType: 'vec3',\n\t\t\t\tsource: getIncludeSnippet( 'emissivemap_fragment' ),\n\t\t\t\ttarget: 'totalEmissiveRadiance = %RESULT%;',\n\t\t\t\tinclusionType: 'append'\n\t\t\t} ) );\n\n\t\t}\n\n\t\tif ( material.isMeshStandardNodeMaterial ) {\n\n\t\t\tif ( material.metalnessNode && material.metalnessNode.isNode ) {\n\n\t\t\t\tthis.addSlot( 'fragment', new SlotNode( {\n\t\t\t\t\tnode: material.metalnessNode,\n\t\t\t\t\tnodeType: 'float',\n\t\t\t\t\tsource: getIncludeSnippet( 'metalnessmap_fragment' ),\n\t\t\t\t\ttarget: 'metalnessFactor = %RESULT%;',\n\t\t\t\t\tinclusionType: 'append'\n\t\t\t\t} ) );\n\n\t\t\t}\n\n\t\t\tif ( material.roughnessNode && material.roughnessNode.isNode ) {\n\n\t\t\t\tthis.addSlot( 'fragment', new SlotNode( {\n\t\t\t\t\tnode: material.roughnessNode,\n\t\t\t\t\tnodeType: 'float',\n\t\t\t\t\tsource: getIncludeSnippet( 'roughnessmap_fragment' ),\n\t\t\t\t\ttarget: 'roughnessFactor = %RESULT%;',\n\t\t\t\t\tinclusionType: 'append'\n\t\t\t\t} ) );\n\n\t\t\t}\n\n\t\t\tif ( material.isMeshPhysicalNodeMaterial ) {\n\n\t\t\t\tif ( material.clearcoatNode && material.clearcoatNode.isNode ) {\n\n\t\t\t\t\tthis.addSlot( 'fragment', new SlotNode( {\n\t\t\t\t\t\tnode: material.clearcoatNode,\n\t\t\t\t\t\tnodeType: 'float',\n\t\t\t\t\t\tsource: 'material.clearcoat = clearcoat;',\n\t\t\t\t\t\ttarget: 'material.clearcoat = %RESULT%;'\n\t\t\t\t\t} ) );\n\n\t\t\t\t\tif ( material.clearcoatRoughnessNode && material.clearcoatRoughnessNode.isNode ) {\n\n\t\t\t\t\t\tthis.addSlot( 'fragment', new SlotNode( {\n\t\t\t\t\t\t\tnode: material.clearcoatRoughnessNode,\n\t\t\t\t\t\t\tnodeType: 'float',\n\t\t\t\t\t\t\tsource: 'material.clearcoatRoughness = clearcoatRoughness;',\n\t\t\t\t\t\t\ttarget: 'material.clearcoatRoughness = %RESULT%;'\n\t\t\t\t\t\t} ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( material.clearcoatNormalNode && material.clearcoatNormalNode.isNode ) {\n\n\t\t\t\t\t\tthis.addSlot( 'fragment', new SlotNode( {\n\t\t\t\t\t\t\tnode: material.clearcoatNormalNode,\n\t\t\t\t\t\t\tnodeType: 'vec3',\n\t\t\t\t\t\t\tsource: 'vec3 clearcoatNormal = nonPerturbedNormal;',\n\t\t\t\t\t\t\ttarget: 'vec3 clearcoatNormal = %RESULT%;'\n\t\t\t\t\t\t} ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmaterial.defines.USE_CLEARCOAT = '';\n\n\t\t\t\t} else {\n\n\t\t\t\t\tdelete material.defines.USE_CLEARCOAT;\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.sheenNode && material.sheenNode.isNode ) {\n\n\t\t\t\t\tthis.addSlot( 'fragment', new SlotNode( {\n\t\t\t\t\t\tnode: material.sheenNode,\n\t\t\t\t\t\tnodeType: 'vec3',\n\t\t\t\t\t\tsource: 'material.sheenColor = sheenColor;',\n\t\t\t\t\t\ttarget: 'material.sheenColor = %RESULT%;'\n\t\t\t\t\t} ) );\n\n\t\t\t\t\tif ( material.sheenRoughnessNode && material.sheenRoughnessNode.isNode ) {\n\n\t\t\t\t\t\tthis.addSlot( 'fragment', new SlotNode( {\n\t\t\t\t\t\t\tnode: material.sheenRoughnessNode,\n\t\t\t\t\t\t\tnodeType: 'float',\n\t\t\t\t\t\t\tsource: 'material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );',\n\t\t\t\t\t\t\ttarget: 'material.sheenRoughness = clamp( %RESULT%, 0.07, 1.0 );'\n\t\t\t\t\t\t} ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmaterial.defines.USE_SHEEN = '';\n\n\t\t\t\t} else {\n\n\t\t\t\t\tdelete material.defines.USE_SHEEN;\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.iridescenceNode && material.iridescenceNode.isNode ) {\n\n\t\t\t\t\tthis.addSlot( 'fragment', new SlotNode( {\n\t\t\t\t\t\tnode: material.iridescenceNode,\n\t\t\t\t\t\tnodeType: 'float',\n\t\t\t\t\t\tsource: 'material.iridescence = iridescence;',\n\t\t\t\t\t\ttarget: 'material.iridescence = %RESULT%;'\n\t\t\t\t\t} ) );\n\n\t\t\t\t\tif ( material.iridescenceIORNode && material.iridescenceIORNode.isNode ) {\n\n\t\t\t\t\t\tthis.addSlot( 'fragment', new SlotNode( {\n\t\t\t\t\t\t\tnode: material.iridescenceIORNode,\n\t\t\t\t\t\t\tnodeType: 'float',\n\t\t\t\t\t\t\tsource: 'material.iridescenceIOR = iridescenceIOR;',\n\t\t\t\t\t\t\ttarget: 'material.iridescenceIOR = %RESULT%;'\n\t\t\t\t\t\t} ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( material.iridescenceThicknessNode && material.iridescenceThicknessNode.isNode ) {\n\n\t\t\t\t\t\tthis.addSlot( 'fragment', new SlotNode( {\n\t\t\t\t\t\t\tnode: material.iridescenceThicknessNode,\n\t\t\t\t\t\t\tnodeType: 'float',\n\t\t\t\t\t\t\tsource: 'material.iridescenceThickness = iridescenceThicknessMaximum;',\n\t\t\t\t\t\t\ttarget: 'material.iridescenceThickness = %RESULT%;'\n\t\t\t\t\t\t} ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmaterial.defines.USE_IRIDESCENCE = '';\n\n\t\t\t\t} else {\n\n\t\t\t\t\tdelete material.defines.USE_IRIDESCENCE;\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.iorNode && material.iorNode.isNode ) {\n\n\t\t\t\t\tthis.addSlot( 'fragment', new SlotNode( {\n\t\t\t\t\t\tnode: material.iorNode,\n\t\t\t\t\t\tnodeType: 'float',\n\t\t\t\t\t\tsource: 'material.ior = ior;',\n\t\t\t\t\t\ttarget: 'material.ior = %RESULT%;'\n\t\t\t\t\t} ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.specularColorNode && material.specularColorNode.isNode ) {\n\n\t\t\t\t\tthis.addSlot( 'fragment', new SlotNode( {\n\t\t\t\t\t\tnode: material.specularColorNode,\n\t\t\t\t\t\tnodeType: 'vec3',\n\t\t\t\t\t\tsource: 'vec3 specularColorFactor = specularColor;',\n\t\t\t\t\t\ttarget: 'vec3 specularColorFactor = %RESULT%;'\n\t\t\t\t\t} ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.specularIntensityNode && material.specularIntensityNode.isNode ) {\n\n\t\t\t\t\tthis.addSlot( 'fragment', new SlotNode( {\n\t\t\t\t\t\tnode: material.specularIntensityNode,\n\t\t\t\t\t\tnodeType: 'float',\n\t\t\t\t\t\tsource: 'float specularIntensityFactor = specularIntensity;',\n\t\t\t\t\t\ttarget: 'float specularIntensityFactor = %RESULT%;'\n\t\t\t\t\t} ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.transmissionNode && material.transmissionNode.isNode ) {\n\n\t\t\t\t\tthis.addSlot( 'fragment', new SlotNode( {\n\t\t\t\t\t\tnode: material.transmissionNode,\n\t\t\t\t\t\tnodeType: 'float',\n\t\t\t\t\t\tsource: 'material.transmission = transmission;',\n\t\t\t\t\t\ttarget: 'material.transmission = %RESULT%;'\n\t\t\t\t\t} ) );\n\n\t\t\t\t\tif ( material.thicknessNode && material.thicknessNode.isNode ) {\n\n\t\t\t\t\t\tthis.addSlot( 'fragment', new SlotNode( {\n\t\t\t\t\t\t\tnode: material.thicknessNode,\n\t\t\t\t\t\t\tnodeType: 'float',\n\t\t\t\t\t\t\tsource: 'material.thickness = thickness;',\n\t\t\t\t\t\t\ttarget: 'material.thickness = %RESULT%;'\n\t\t\t\t\t\t} ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( material.attenuationDistanceNode && material.attenuationDistanceNode.isNode ) {\n\n\t\t\t\t\t\tthis.addSlot( 'fragment', new SlotNode( {\n\t\t\t\t\t\t\tnode: material.attenuationDistanceNode,\n\t\t\t\t\t\t\tnodeType: 'float',\n\t\t\t\t\t\t\tsource: 'material.attenuationDistance = attenuationDistance;',\n\t\t\t\t\t\t\ttarget: 'material.attenuationDistance = %RESULT%;'\n\t\t\t\t\t\t} ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( material.attenuationColorNode && material.attenuationColorNode.isNode ) {\n\n\t\t\t\t\t\tthis.addSlot( 'fragment', new SlotNode( {\n\t\t\t\t\t\t\tnode: material.attenuationColorNode,\n\t\t\t\t\t\t\tnodeType: 'vec3',\n\t\t\t\t\t\t\tsource: 'material.attenuationColor = attenuationColor;',\n\t\t\t\t\t\t\ttarget: 'material.attenuationColor = %RESULT%;'\n\t\t\t\t\t\t} ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmaterial.transmission = 1;\n\t\t\t\t\tmaterial.defines.USE_TRANSMISSION = '';\n\n\t\t\t\t} else {\n\n\t\t\t\t\tmaterial.transmission = 0;\n\t\t\t\t\tdelete material.defines.USE_TRANSMISSION;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tif ( material.positionNode && material.positionNode.isNode ) {\n\n\t\t\tthis.addSlot( 'vertex', new SlotNode( {\n\t\t\t\tnode: material.positionNode,\n\t\t\t\tnodeType: 'vec3',\n\t\t\t\tsource: getIncludeSnippet( 'begin_vertex' ),\n\t\t\t\ttarget: 'transformed = %RESULT%;',\n\t\t\t\tinclusionType: 'append'\n\t\t\t} ) );\n\n\t\t}\n\n\t\tif ( material.sizeNode && material.sizeNode.isNode ) {\n\n\t\t\tthis.addSlot( 'vertex', new SlotNode( {\n\t\t\t\tnode: material.sizeNode,\n\t\t\t\tnodeType: 'float',\n\t\t\t\tsource: 'gl_PointSize = size;',\n\t\t\t\ttarget: 'gl_PointSize = %RESULT%;'\n\t\t\t} ) );\n\n\t\t}\n\n\t}\n\n\tgenerateTexture( texture, textureProperty, uvSnippet ) {\n\n\t\tif ( texture.isTextureCube ) {\n\n\t\t\treturn `textureCube( ${textureProperty}, ${uvSnippet} )`;\n\n\t\t} else {\n\n\t\t\treturn `texture2D( ${textureProperty}, ${uvSnippet} )`;\n\n\t\t}\n\n\t}\n\n\tgenerateTextureLevel( texture, textureProperty, uvSnippet, biasSnippet ) {\n\n\t\tif ( this.material.extensions !== undefined ) this.material.extensions.shaderTextureLOD = true;\n\n\t\treturn `textureLod( ${textureProperty}, ${uvSnippet}, ${biasSnippet} )`;\n\n\t}\n\n\tgetUniforms( shaderStage ) {\n\n\t\tconst uniforms = this.uniforms[ shaderStage ];\n\n\t\tlet output = '';\n\n\t\tfor ( const uniform of uniforms ) {\n\n\t\t\tif ( /^(modelViewMatrix|projectionMatrix)$/.test( uniform.name ) )\n\t\t\t\tcontinue;\n\n\t\t\tlet snippet = null;\n\n\t\t\tif ( uniform.type === 'texture' ) {\n\n\t\t\t\tsnippet = `sampler2D ${uniform.name}; `;\n\n\t\t\t} else if ( uniform.type === 'cubeTexture' ) {\n\n\t\t\t\tsnippet = `samplerCube ${uniform.name}; `;\n\n\t\t\t} else {\n\n\t\t\t\tconst vectorType = this.getVectorType( uniform.type );\n\n\t\t\t\tsnippet = `${vectorType} ${uniform.name}; `;\n\n\t\t\t}\n\n\t\t\tconst precision = uniform.node.precision;\n\n\t\t\tif ( precision !== null ) {\n\n\t\t\t\tsnippet = 'uniform ' + precisionLib[ precision ] + ' ' + snippet;\n\n\t\t\t} else {\n\n\t\t\t\tsnippet = 'uniform ' + snippet;\n\n\t\t\t}\n\n\t\t\toutput += snippet;\n\n\t\t}\n\n\t\treturn output;\n\n\t}\n\n\tgetAttributes( shaderStage ) {\n\n\t\tlet snippet = '';\n\n\t\tif ( shaderStage === 'vertex' ) {\n\n\t\t\tconst attributes = this.attributes;\n\n\t\t\tfor ( const attribute of attributes ) {\n\n\t\t\t\t// ignore common attributes to prevent redefinitions\n\t\t\t\tif ( /^(position|normal|uv[1-3]?)$/.test( attribute.name ) )\n\t\t\t\t\tcontinue;\n\n\t\t\t\tsnippet += `attribute ${attribute.type} ${attribute.name}; `;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn snippet;\n\n\t}\n\n\tgetVaryings( shaderStage ) {\n\n\t\tlet snippet = '';\n\n\t\tconst varyings = this.varyings;\n\n\t\tif ( shaderStage === 'vertex' ) {\n\n\t\t\tfor ( const varying of varyings ) {\n\n\t\t\t\tsnippet += `${varying.needsInterpolation ? 'varying' : '/*varying*/'} ${varying.type} ${varying.name}; `;\n\n\t\t\t}\n\n\t\t} else if ( shaderStage === 'fragment' ) {\n\n\t\t\tfor ( const varying of varyings ) {\n\n\t\t\t\tif ( varying.needsInterpolation ) {\n\n\t\t\t\t\tsnippet += `varying ${varying.type} ${varying.name}; `;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn snippet;\n\n\t}\n\n\taddCode( shaderStage, source, code, scope = this ) {\n\n\t\tconst shaderProperty = getShaderStageProperty( shaderStage );\n\n\t\tlet snippet = scope[ shaderProperty ];\n\n\t\tconst index = snippet.indexOf( source );\n\n\t\tif ( index !== - 1 ) {\n\n\t\t\tconst start = snippet.substring( 0, index + source.length );\n\t\t\tconst end = snippet.substring( index + source.length );\n\n\t\t\tsnippet = `${start}\\n${code}\\n${end}`;\n\n\t\t}\n\n\t\tscope[ shaderProperty ] = snippet;\n\n\t}\n\n\treplaceCode( shaderStage, source, target, scope = this ) {\n\n\t\tconst shaderProperty = getShaderStageProperty( shaderStage );\n\n\t\tscope[ shaderProperty ] = scope[ shaderProperty ].replaceAll( source, target );\n\n\t}\n\n\tgetVertexIndex() {\n\n\t\treturn 'gl_VertexID';\n\n\t}\n\n\tgetFrontFacing() {\n\n\t\treturn 'gl_FrontFacing';\n\n\t}\n\n\tgetFragCoord() {\n\n\t\treturn 'gl_FragCoord';\n\n\t}\n\n\tisFlipY() {\n\n\t\treturn true;\n\n\t}\n\n\tbuildCode() {\n\n\t\tconst shaderData = {};\n\n\t\tfor ( const shaderStage of defaultShaderStages ) {\n\n\t\t\tconst uniforms = this.getUniforms( shaderStage );\n\t\t\tconst attributes = this.getAttributes( shaderStage );\n\t\t\tconst varyings = this.getVaryings( shaderStage );\n\t\t\tconst vars = this.getVars( shaderStage );\n\t\t\tconst codes = this.getCodes( shaderStage );\n\n\t\t\tshaderData[ shaderStage ] = `${this.getSignature()}\n// <node_builder>\n\n// uniforms\n${uniforms}\n\n// attributes\n${attributes}\n\n// varyings\n${varyings}\n\n// vars\n${vars}\n\n// codes\n${codes}\n\n// </node_builder>\n\n${this.shader[ getShaderStageProperty( shaderStage ) ]}\n`;\n\n\t\t}\n\n\t\tthis.vertexShader = shaderData.vertex;\n\t\tthis.fragmentShader = shaderData.fragment;\n\n\t}\n\n\tbuild() {\n\n\t\tsuper.build();\n\n\t\tthis._addSnippets();\n\t\tthis._addUniforms();\n\n\t\tthis._updateUniforms();\n\n\t\tthis.shader.vertexShader = this.vertexShader;\n\t\tthis.shader.fragmentShader = this.fragmentShader;\n\n\t\treturn this;\n\n\t}\n\n\t_parseInclude( shaderStage, ...includes ) {\n\n\t\tfor ( const name of includes ) {\n\n\t\t\tconst includeSnippet = getIncludeSnippet( name );\n\t\t\tconst code = ShaderChunk[ name ];\n\n\t\t\tconst shaderProperty = getShaderStageProperty( shaderStage );\n\n\t\t\tthis.shader[ shaderProperty ] = this.shader[ shaderProperty ].replaceAll( includeSnippet, code );\n\n\t\t}\n\n\t}\n\n\t_sortSlotsToFlow() {\n\n\t\tfor ( const shaderStage of defaultShaderStages ) {\n\n\t\t\tconst sourceCode = this.shader[ getShaderStageProperty( shaderStage ) ];\n\n\t\t\tconst slots = this.slots[ shaderStage ].sort( ( slotA, slotB ) => {\n\n\t\t\t\treturn sourceCode.indexOf( slotA.source ) > sourceCode.indexOf( slotB.source ) ? 1 : - 1;\n\n\t\t\t} );\n\n\t\t\tfor ( const slotNode of slots ) {\n\n\t\t\t\tthis.addFlow( shaderStage, slotNode );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_addSnippets() {\n\n\t\tfor ( const shaderStage of defaultShaderStages ) {\n\n\t\t\tfor ( const slotNode of this.slots[ shaderStage ] ) {\n\n\t\t\t\tconst flowData = this.getFlowData( slotNode/*, shaderStage*/ );\n\n\t\t\t\tconst inclusionType = slotNode.inclusionType;\n\t\t\t\tconst source = slotNode.source;\n\t\t\t\tconst target = flowData.code + '\\n\\t' + slotNode.target.replace( '%RESULT%', flowData.result );\n\n\t\t\t\tif ( inclusionType === 'append' ) {\n\n\t\t\t\t\tthis.addCode( shaderStage, source, target );\n\n\t\t\t\t} else if ( inclusionType === 'replace' ) {\n\n\t\t\t\t\tthis.replaceCode( shaderStage, source, target );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( `Inclusion type \"${ inclusionType }\" not compatible.` );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.addCode(\n\t\t\t\tshaderStage,\n\t\t\t\t'main() {',\n\t\t\t\t'\\n\\t' + this.flowCode[ shaderStage ]\n\t\t\t);\n\n\t\t}\n\n\t}\n\n\t_addUniforms() {\n\n\t\tfor ( const shaderStage of defaultShaderStages ) {\n\n\t\t\t// uniforms\n\n\t\t\tfor ( const uniform of this.uniforms[ shaderStage ] ) {\n\n\t\t\t\tthis.shader.uniforms[ uniform.name ] = uniform;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_updateUniforms() {\n\n\t\tnodeFrame.object = this.object;\n\t\tnodeFrame.renderer = this.renderer;\n\n\t\tfor ( const node of this.updateNodes ) {\n\n\t\t\tnodeFrame.updateNode( node );\n\n\t\t}\n\n\t}\n\n}\n\nexport { WebGLNodeBuilder };\n", "import { WebGLNodeBuilder } from './WebGLNodeBuilder.js';\nimport { NodeFrame } from 'three/nodes';\n\nimport { Material } from 'three';\n\nconst builders = new WeakMap();\nexport const nodeFrame = new NodeFrame();\n\nMaterial.prototype.onBuild = function ( object, parameters, renderer ) {\n\n\tconst material = this;\n\n\tif ( material.isNodeMaterial === true ) {\n\n\t\tbuilders.set( material, new WebGLNodeBuilder( object, renderer, parameters, material ).build() );\n\n\t}\n\n};\n\nMaterial.prototype.onBeforeRender = function ( renderer, scene, camera, geometry, object ) {\n\n\tconst nodeBuilder = builders.get( this );\n\n\tif ( nodeBuilder !== undefined ) {\n\n\t\tnodeFrame.material = this;\n\t\tnodeFrame.camera = camera;\n\t\tnodeFrame.object = object;\n\t\tnodeFrame.renderer = renderer;\n\n\t\tconst updateNodes = nodeBuilder.updateNodes;\n\n\t\tif ( updateNodes.length > 0 ) {\n\n\t\t\t// force refresh material uniforms\n\t\t\trenderer.state.useProgram( null );\n\n\t\t\t//this.uniformsNeedUpdate = true;\n\n\t\t\tfor ( const node of updateNodes ) {\n\n\t\t\t\tnodeFrame.updateNode( node );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n};\n"],
  "mappings": "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",
  "names": ["nodeFrame"]
}
